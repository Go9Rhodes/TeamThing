#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using TeamThing.Model;
using Telerik.OpenAccess.Metadata.Relational;
using Telerik.OpenAccess.Metadata.Fluent;

namespace TeamThing.Model
{

	public class TeamThingModelFluentMetadataSource : FluentMetadataSource
	{
		
		protected override IList<MappingConfiguration> PrepareMapping()
		{
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();
			
			MappingConfiguration<Team> teamConfiguration = this.GetTeamMappingConfiguration();
			mappingConfigurations.Add(teamConfiguration);
			
			MappingConfiguration<TeamMember> teammemberConfiguration = this.GetTeamMemberMappingConfiguration();
			mappingConfigurations.Add(teammemberConfiguration);
			
			MappingConfiguration<ThingSource> thingsourceConfiguration = this.GetThingSourceMappingConfiguration();
			mappingConfigurations.Add(thingsourceConfiguration);
			
			MappingConfiguration<Task> taskConfiguration = this.GetTaskMappingConfiguration();
			mappingConfigurations.Add(taskConfiguration);
			
			MappingConfiguration<Obstacle> obstacleConfiguration = this.GetObstacleMappingConfiguration();
			mappingConfigurations.Add(obstacleConfiguration);
			
			MappingConfiguration<EmailLog> emaillogConfiguration = this.GetEmailLogMappingConfiguration();
			mappingConfigurations.Add(emaillogConfiguration);
			
			MappingConfiguration<ThingBase> thingbaseConfiguration = this.GetThingBaseMappingConfiguration();
			mappingConfigurations.Add(thingbaseConfiguration);
			
			return mappingConfigurations;
		}
		
		public MappingConfiguration<Team> GetTeamMappingConfiguration()
		{
			MappingConfiguration<Team> configuration = this.GetTeamClassConfiguration();
						this.PrepareTeamPropertyConfigurations(configuration);
				return configuration;
		}
		public MappingConfiguration<Team> GetTeamClassConfiguration()
		{
			MappingConfiguration<Team> configuration = new MappingConfiguration<Team>();
			configuration.MapType().WithDataAccessKind(DataAccessKind.ReadWrite);
		
			return configuration;
		}
	
		public void PrepareTeamPropertyConfigurations(MappingConfiguration<Team> configuration)
		{
			configuration.HasProperty(x => x.TeamId).IsIdentity().HasFieldName("_teamId").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.TeamMembers).HasFieldName("_teamMembers").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.TeamName).HasFieldName("_teamName").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.IsEnabled).HasFieldName("_isEnabled").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		public MappingConfiguration<TeamMember> GetTeamMemberMappingConfiguration()
		{
			MappingConfiguration<TeamMember> configuration = this.GetTeamMemberClassConfiguration();
						this.PrepareTeamMemberPropertyConfigurations(configuration);
				return configuration;
		}
		public MappingConfiguration<TeamMember> GetTeamMemberClassConfiguration()
		{
			MappingConfiguration<TeamMember> configuration = new MappingConfiguration<TeamMember>();
			configuration.MapType().WithDataAccessKind(DataAccessKind.ReadWrite);
		
			return configuration;
		}
	
		public void PrepareTeamMemberPropertyConfigurations(MappingConfiguration<TeamMember> configuration)
		{
			configuration.HasProperty(x => x.FirstName).HasFieldName("_firstName").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.LastName).HasFieldName("_lastName").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.Email).HasFieldName("_email").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.ProfileColor).HasFieldName("_profileColor").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.TeamMemberId).IsIdentity().HasFieldName("_teamMemberId").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.Things).HasFieldName("_things").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.Team).HasFieldName("_team").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.ApiKey).HasFieldName("_apiKey").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		public MappingConfiguration<ThingSource> GetThingSourceMappingConfiguration()
		{
			MappingConfiguration<ThingSource> configuration = this.GetThingSourceClassConfiguration();
						this.PrepareThingSourcePropertyConfigurations(configuration);
				return configuration;
		}
		public MappingConfiguration<ThingSource> GetThingSourceClassConfiguration()
		{
			MappingConfiguration<ThingSource> configuration = new MappingConfiguration<ThingSource>();
			configuration.MapType().WithDataAccessKind(DataAccessKind.ReadWrite);
		
			return configuration;
		}
	
		public void PrepareThingSourcePropertyConfigurations(MappingConfiguration<ThingSource> configuration)
		{
			configuration.HasProperty(x => x.Things).HasFieldName("_things").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.ThingSourceId).IsIdentity().HasFieldName("_thingSourceId").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.MessageId).HasFieldName("_messageId").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.FromAddress).HasFieldName("_fromAddress").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.MessageDate).HasFieldName("_messageDate").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.MessageBody).HasFieldName("_messageBody").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.DateImported).HasFieldName("_dateImported").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.TeamMember).HasFieldName("_teamMember").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		public MappingConfiguration<Task> GetTaskMappingConfiguration()
		{
			MappingConfiguration<Task> configuration = this.GetTaskClassConfiguration();
						this.PrepareTaskPropertyConfigurations(configuration);
				return configuration;
		}
		public MappingConfiguration<Task> GetTaskClassConfiguration()
		{
			MappingConfiguration<Task> configuration = new MappingConfiguration<Task>();
			configuration.MapType().WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Flat).ToTable("thing_base");
		
			return configuration;
		}
	
		public void PrepareTaskPropertyConfigurations(MappingConfiguration<Task> configuration)
		{
			configuration.HasProperty(x => x.Status).HasFieldName("_status").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.TaskType).HasFieldName("_taskType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("task_type").IsNotNullable().HasColumnType("int");
		}
		public MappingConfiguration<Obstacle> GetObstacleMappingConfiguration()
		{
			MappingConfiguration<Obstacle> configuration = this.GetObstacleClassConfiguration();
						this.PrepareObstaclePropertyConfigurations(configuration);
				return configuration;
		}
		public MappingConfiguration<Obstacle> GetObstacleClassConfiguration()
		{
			MappingConfiguration<Obstacle> configuration = new MappingConfiguration<Obstacle>();
			configuration.MapType().WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Default).ToTable("thing_base");
		
			return configuration;
		}
	
		public void PrepareObstaclePropertyConfigurations(MappingConfiguration<Obstacle> configuration)
		{
			configuration.HasProperty(x => x.IsCleared).HasFieldName("_isCleared").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		public MappingConfiguration<EmailLog> GetEmailLogMappingConfiguration()
		{
			MappingConfiguration<EmailLog> configuration = this.GetEmailLogClassConfiguration();
						this.PrepareEmailLogPropertyConfigurations(configuration);
				return configuration;
		}
		public MappingConfiguration<EmailLog> GetEmailLogClassConfiguration()
		{
			MappingConfiguration<EmailLog> configuration = new MappingConfiguration<EmailLog>();
			configuration.MapType().WithDataAccessKind(DataAccessKind.ReadWrite);
		
			return configuration;
		}
	
		public void PrepareEmailLogPropertyConfigurations(MappingConfiguration<EmailLog> configuration)
		{
			configuration.HasProperty(x => x.EmailLogId).IsIdentity().HasFieldName("_emailLogId").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.Subject).HasFieldName("_subject").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.ToAddress).HasFieldName("_toAddress").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.SendDate).HasFieldName("_sendDate").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.Team).HasFieldName("_team").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.TeamMember).HasFieldName("_teamMember").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasProperty(x => x.EmailType).HasFieldName("_emailType").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		public MappingConfiguration<ThingBase> GetThingBaseMappingConfiguration()
		{
			MappingConfiguration<ThingBase> configuration = this.GetThingBaseClassConfiguration();
						this.PrepareThingBasePropertyConfigurations(configuration);
				return configuration;
		}
		public MappingConfiguration<ThingBase> GetThingBaseClassConfiguration()
		{
			MappingConfiguration<ThingBase> configuration = new MappingConfiguration<ThingBase>();
			configuration.MapType().WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Default).ToTable("thing_base");
		
			return configuration;
		}
	
		public void PrepareThingBasePropertyConfigurations(MappingConfiguration<ThingBase> configuration)
		{
			configuration.HasProperty(x => x.Task_type).HasFieldName("_taskType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("task_type").IsNotNullable().HasColumnType("int").HasLength(0);
			configuration.HasProperty(x => x.ThingId).HasFieldName("_thingId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("thing_id").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Description).HasFieldName("_description").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("description").IsNullable().HasColumnType("varchar").HasLength(0);
			configuration.HasProperty(x => x.TeamMember).HasFieldName("_teamMember").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("team_member").IsNotNullable().HasColumnType("int");
			configuration.HasProperty(x => x.DateCreated).HasFieldName("_dateCreated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("date_created").IsNotNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.ThingSource).HasFieldName("_thingSource").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("thing_source").IsNotNullable().HasColumnType("int");
		}
	}
}
